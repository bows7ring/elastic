diff --git hw/riscv/virt.c hw/riscv/virt.c
index 25faf3b417..47bff37d27 100644
--- hw/riscv/virt.c
+++ hw/riscv/virt.c
@@ -55,7 +55,7 @@ static const struct MemmapEntry {
     hwaddr size;
 } virt_memmap[] = {
     [VIRT_DEBUG] =       {        0x0,         0x100 },
-    [VIRT_MROM] =        {     0x1000,       0x11000 },
+    [VIRT_MROM] =        {     0x1000,       0x40000 },
     [VIRT_TEST] =        {   0x100000,        0x1000 },
     [VIRT_CLINT] =       {  0x2000000,       0x10000 },
     [VIRT_PLIC] =        {  0xc000000,     0x4000000 },
@@ -405,8 +405,8 @@ static void riscv_virt_board_init(MachineState *machine)
     memory_region_add_subregion(system_memory, memmap[VIRT_MROM].base,
                                 mask_rom);
 
-    riscv_find_and_load_firmware(machine, BIOS_FILENAME,
-                                 memmap[VIRT_DRAM].base);
+    //riscv_find_and_load_firmware(machine, BIOS_FILENAME,
+    //                             memmap[VIRT_DRAM].base);
 
     if (machine->kernel_filename) {
         uint64_t kernel_entry = riscv_load_kernel(machine->kernel_filename);
@@ -423,6 +423,50 @@ static void riscv_virt_board_init(MachineState *machine)
         }
     }
 
+    if (machine->firmware) {
+      qemu_log("overriding secure boot ROM (file: %s)\n",machine->firmware);
+      /* reset_vector */
+      FILE *bootloader_file;
+      long bootloader_size;
+      char *bootloader_bytes;
+
+      bootloader_file = fopen ( machine->firmware, "rb" );
+      if( !bootloader_file ) perror("Failed to open the bootloader file."),exit(1);
+
+      fseek( bootloader_file , 0L , SEEK_END);
+      bootloader_size = ftell( bootloader_file );
+      rewind( bootloader_file );
+
+      bootloader_bytes = (char*)malloc(bootloader_size * sizeof(char));
+      if( !bootloader_bytes ) fclose(bootloader_file),fputs("Failed to allocate space to read the bootloader file.",stderr),exit(1);
+
+      if( 1!=fread( bootloader_bytes , bootloader_size, 1 , bootloader_file) )
+        fclose(bootloader_file),free(bootloader_bytes),fputs("Failed to read entire bootloader file.",stderr),exit(1);
+
+      fclose(bootloader_file);
+
+      qemu_log("boot ROM size: %ld\n", bootloader_size);
+      /* copy in the reset vector */
+      rom_add_blob_fixed_as("mrom.reset", bootloader_bytes, bootloader_size,
+		            memmap[VIRT_MROM].base, &address_space_memory);
+
+			/* copy in the device tree */
+			/* copy in the device tree */
+			if (fdt_pack(s->fdt) || fdt_totalsize(s->fdt) >
+					memmap[VIRT_MROM].size - bootloader_size) {
+				error_report("not enough space to store device-tree");
+				exit(1);
+			}
+			qemu_fdt_dumpdtb(s->fdt, fdt_totalsize(s->fdt));
+			rom_add_blob_fixed_as("mrom.fdt", s->fdt, fdt_totalsize(s->fdt),
+					memmap[VIRT_MROM].base + bootloader_size,
+					&address_space_memory);
+			
+			qemu_log("fdt dumped at %ld\n", memmap[VIRT_MROM].base + bootloader_size);
+
+      free(bootloader_bytes);
+    } else {
+
     /* reset vector */
     uint32_t reset_vec[8] = {
         0x00000297,                  /* 1:  auipc  t0, %pcrel_hi(dtb) */
@@ -446,6 +490,7 @@ static void riscv_virt_board_init(MachineState *machine)
     }
     rom_add_blob_fixed_as("mrom.reset", reset_vec, sizeof(reset_vec),
                           memmap[VIRT_MROM].base, &address_space_memory);
+    
 
     /* copy in the device tree */
     if (fdt_pack(s->fdt) || fdt_totalsize(s->fdt) >
@@ -457,6 +502,8 @@ static void riscv_virt_board_init(MachineState *machine)
     rom_add_blob_fixed_as("mrom.fdt", s->fdt, fdt_totalsize(s->fdt),
                           memmap[VIRT_MROM].base + sizeof(reset_vec),
                           &address_space_memory);
+    
+    }
 
     /* create PLIC hart topology configuration string */
     plic_hart_config_len = (strlen(VIRT_PLIC_HART_CONFIG) + 1) * smp_cpus;
